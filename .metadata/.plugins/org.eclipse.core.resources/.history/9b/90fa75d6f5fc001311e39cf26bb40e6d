// Name: Devin "Lauren" Elder
// Application: Game Finder Application
// Date: 6/18/2014
// Class: Java 1 Term 201406
// Assignment: Project 3

package com.example.gamefinder;

//import com.example.gamefinder.CustomCellLayout;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.R.integer;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Fragment;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.Image;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import classDetails.GameDetails;
import classDetails.Games;
import classDetails.Returns;
import classDetails.Stores;

public class MainActivity extends Activity {

	// Global Variables
	static String tag = "MAINACTIVITY";
	static Context context;
	String dd;
	String currentURL;
	String dealID;
	boolean game;
	boolean details;
	boolean stores;
	int returnNum;
	Bitmap currentThumbnail;
	ProgressBar animation;
	Button findButton;
	
	// Array Adapters for List and Spinner
	ArrayAdapter<Games> listAdapter;
//	ArrayAdapter<Stores> spinnerAdapter;
	ArrayAdapter<Returns> spinnerAdapter;
	
	// Class Lists
	List<Games> gamesList = new ArrayList<Games>();
	List<Stores> storeList = new ArrayList<Stores>();
	List<GameDetails> gameDetails = new ArrayList<GameDetails>();
	List<Returns> resultsReturned = new ArrayList<Returns>();
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        context = this;
        
        // Modify StrictMode to allow access to the URL's Containing Thumbnail Images
        StrictMode.ThreadPolicy policy = new StrictMode.
        		ThreadPolicy.Builder().permitNetwork().build();
        StrictMode.setThreadPolicy(policy); 
        		
        dd = context.getString(R.string.dummy_data);
        setContentView(R.layout.activity_main);

        if (savedInstanceState == null) {
            getFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }
        
        // Set Animation
        animation = (ProgressBar)findViewById(R.id.busyAnimation);
//        animation.setVisibility(View.INVISIBLE);
        
        // ListView Code 
		listAdapter = new customListAdapter();
        ListView listView = (ListView)findViewById(R.id.list);
		listView.setAdapter(listAdapter);
		listView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				
				// Boolean Set to Select Correct API
				game = false;
				details = true;
				stores = false;
				gameDetails.removeAll(gameDetails);

				// Display Game Information Method
				dealID = gamesList.get(position).dealID.toString();
				currentURL = context.getString(R.string.details_url) + dealID;
//				Log.i(tag, currentURL.toString());
				
				// API Call for Game Details
				getAPIdata data = new getAPIdata();
				data.execute(currentURL);
//				Log.i(tag, "The listener works!");
			}
			
		});
		
		// Static Game Hint List On App Load
        returnNum = 4;
		parseData("games", null);
		
		// Spinner Code
/*		spinnerAdapter = new ArrayAdapter<Stores>
		(this, android.R.layout.simple_spinner_item, storeList);
		spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		Spinner spinnerView = (Spinner)findViewById(R.id.storeList);
		spinnerView.setAdapter(spinnerAdapter);*/
		
		// Spinner Code
		spinnerAdapter = new ArrayAdapter<Returns>
		(this, android.R.layout.simple_spinner_item, resultsReturned);
		spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		Spinner spinnerView = (Spinner)findViewById(R.id.resultList);
		spinnerView.setAdapter(spinnerAdapter);
		spinnerView.setOnItemSelectedListener(new getSelectedItem());
		
		// Check Network Connection and Show Error Notification if false
/*		if (checkConnection(context) == true) {
			// Boolean Set to Select Correct API
			game = false;
			details = false;
			stores = true;
			returnAll = true;
			getAPIdata data = new getAPIdata();
			data.execute(context.getString(R.string.store_url));
		} else {
			showErrorAlert(findViewById(android.R.id.content).getRootView(), "connection");
			Log.i(tag, "No Internet Connection");
		}*/
		
		// Set Results Returned Class
		for (Integer n = 1; n < 5; n++) {
			Integer revisedNum = n * 5;
			Returns newNumberReturned = new Returns(revisedNum);
			resultsReturned.add(newNumberReturned);
			spinnerAdapter.notifyDataSetChanged();
		}

//		Log.i(tag, gamesList.toString());
		
		// Find Button OnClickListener
		findButton = (Button)findViewById(R.id.findButton);
		findButton.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (checkConnection(context) == true) {
					// Boolean Set to Select Correct API
					game = true;
					details = false;
					stores = false;
					EditText searchField = (EditText)findViewById(R.id.gameInput);
					String gameInput = searchField.getText().toString();
					if (gameInput.isEmpty()) {
						// Error Notification for Empty EditText Field
						showErrorAlert(v, "input");
					} else {
						// Clear ListView and Call Game List API
						gamesList.removeAll(gamesList);
						String gameEndURL = context.getString(R.string.post_game_url);
//						Log.i(tag, gameEndURL.toString());
						gameEndURL = gameEndURL.replace("_", "&");
//						Log.i(tag, gameEndURL.toString());
						String gameFullURL = context.getString(R.string.game_url) + gameInput 
								+ gameEndURL;
						currentURL = gameFullURL;
						getAPIdata data = new getAPIdata();
						data.execute(gameFullURL);
						Log.i(tag, currentURL.toString());
//						Log.i(tag, gamesList.toString());
					}
				} else {
					// Check Network Connection and Show Error Notification if false
					showErrorAlert(v, "connection");
					Log.i(tag, "No Internet Connection");
				}
			}
		});
    }

	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            return rootView;
        }
    }
    
	// Get and Parse JSON Function
	public void parseData(String classType, String apiData) {
		
		//Get Data
		StringBuffer jsonBuffer = new StringBuffer();
		BufferedReader reader = null;
		try {
			// Selection of Static JSON Data and Parse According to JSON Format
			if (classType.matches("games")) {
				reader = new BufferedReader(new InputStreamReader(getAssets().open(
						"games.JSON")));
			}
			if (classType.matches("stores")) {
				reader = new BufferedReader(new InputStreamReader(getAssets().open(
						"stores.JSON")));
			}
			if (classType.matches("details")) {
				reader = new BufferedReader(new InputStreamReader(getAssets().open(
						"gameDetails.JSON")));
			}
			String temporaryData;
			while ((temporaryData = reader.readLine()) != null)
				jsonBuffer.append(temporaryData);
		} 
		catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				reader.close(); 
			} 
			catch (IOException e) {
				e.printStackTrace();
			}
		}
		String jsonString;
		if (apiData == null) {
			jsonString = jsonBuffer.toString();
			
		} else {
			jsonString = apiData;
		}
//		Log.i(tag, jsonString);
		
		// Parse JSON
		try {
			// Creating JSONObject from String
			if (classType.matches("games")) {
				Integer listCount = 0;
				JSONArray jsonArray = new JSONArray(jsonString);
				for (int i = 0; i < jsonArray.length(); i++) {
					
					// Creating JSONObject from JSONArray
					JSONObject jsonSubObject = jsonArray.getJSONObject(i);
					
					// Class Specific Data
					String thisGameName = jsonSubObject.getString("external");
					String thisDealID = jsonSubObject.getString("cheapestDealID");
					String thisCheapestPrice = jsonSubObject.getString("cheapest");
					String thisThumbnail = jsonSubObject.getString("thumb");
/*					Log.i(tag, thisGameName);
					Log.i(tag, thisDealID);
					Log.i(tag, thisCheapestPrice);
					Log.i(tag, thisThumbnail);*/
					
					// Dummy Data
					Integer thisStoreID = 0;
					String thisName = dd;
					String thisPublisher = dd;
					String thisSalePrice = dd;
					String thisRetailPrice = dd;
					String thisImage = dd;
					Integer thisID = 0;
					
					// Limit the number of Objects Saved
					if (listCount <= returnNum) {
//						Log.i(tag, listCount.toString());
						// Set Class Method
						EditText searchField = (EditText)findViewById(R.id.gameInput);
						String gameInput = searchField.getText().toString();
						if (thisGameName.contains(gameInput)) {
							setClass( classType, thisGameName, thisDealID, thisCheapestPrice
									, thisThumbnail, thisStoreID, thisName, thisPublisher, thisSalePrice
									, thisRetailPrice, thisImage, thisID);
							listCount++;
							
						}
/*						setClass( classType, thisGameName, thisDealID, thisCheapestPrice
								, thisThumbnail, thisStoreID, thisName, thisPublisher, thisSalePrice
								, thisRetailPrice, thisImage, thisID);*/
					}
//					listCount++;
				}
				
			}
			if (classType.matches("stores")) {
				JSONArray jsonArray = new JSONArray(jsonString);
				for (int i = 0; i < jsonArray.length(); i++) {
					
					// Creating JSONObject from JSONArray
					JSONObject jsonSubObject = jsonArray.getJSONObject(i);
					
					// Class Specific Data
					Integer thisID = Integer.parseInt(jsonSubObject.getString("storeID"));
//					Log.i(tag, thisID.toString());
					
					// Dummy Data
					String thisGameName = dd;
					String thisDealID = dd;
					String thisCheapestPrice = dd;
					String thisThumbnail = dd;
					Integer thisStoreID = 0;
					String thisName = dd;
					String thisPublisher = dd;
					String thisSalePrice = dd;
					String thisRetailPrice = dd;
					String thisImage = dd;
					
					// SetClass Method
					setClass( classType, thisGameName, thisDealID, thisCheapestPrice
							, thisThumbnail, thisStoreID, thisName, thisPublisher, thisSalePrice
							, thisRetailPrice, thisImage, thisID);
				}
			}
			if (classType.matches("details")) {
				JSONObject mainObject = new JSONObject(jsonString);
				JSONObject subObject = mainObject.getJSONObject("gameInfo");
				
				// Class Specific Data
				Integer thisStoreID = Integer.parseInt(subObject.getString("storeID"));
				String thisName = subObject.getString("name");
				String thisPublisher = subObject.getString("publisher");
				String thisSalePrice = subObject.getString("salePrice");
				String thisRetailPrice = subObject.getString("retailPrice");
				String thisImage = subObject.getString("thumb");
/*				Log.i(tag, thisStoreID.toString());
				Log.i(tag, thisName);
				Log.i(tag, thisPublisher);
				Log.i(tag, thisSalePrice);
				Log.i(tag, thisRetailPrice);
				Log.i(tag, thisImage);*/
				
				// Dummy Data
				String thisGameName = dd;
				String thisDealID = dd;
				String thisCheapestPrice = dd;
				String thisThumbnail = dd;
				Integer thisID = 0;
				
				// Set Class Method
				setClass( classType, thisGameName, thisDealID, thisCheapestPrice
						, thisThumbnail, thisStoreID, thisName, thisPublisher, thisSalePrice
						, thisRetailPrice, thisImage, thisID);
			}
		} 
		catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
    
	// Assigning Parsed Data to Proper Class
	public void setClass( String type, String gameName, String dealID, String cheapestPrice
			, String thumbnail, Integer StoreID, String Name, String Publisher
			, String SalePrice, String RetailPrice, String Image, Integer ID) {
		if (type.matches("games")) {
			Games newGame = new Games(gameName, dealID, cheapestPrice, thumbnail);
			gamesList.add(newGame);
//			Log.i(tag, newGame.toString());
			listAdapter.notifyDataSetChanged();
		}
		if (type.matches("stores")) {
/*			if (returnAll == true) {
				Stores newStoreList = new Stores(1234);
				storeList.add(newStoreList);
				returnAll = false;
			}*/
			Stores newStoreList = new Stores(ID);
			storeList.add(newStoreList);
			spinnerAdapter.notifyDataSetChanged();
		}
		if (type.matches("details")) {
			GameDetails details = new GameDetails(StoreID, Name, Publisher
					, SalePrice, RetailPrice, Image);
			gameDetails.add(details);
			
			// Show Game Details Notification
			showAlert(findViewById(android.R.id.content).getRootView());
			Log.i(tag, details.toString());
		}
	}
	
	// Internet Connection Error
	private void showErrorAlert(View view, String error) {
    	AlertDialog.Builder alertErrorNotification = new AlertDialog.Builder(MainActivity.this);
    	
    	// Set Alert Text based on Error
    	if (error == "input") {
        	alertErrorNotification.setTitle(R.string.input_error_title);
        	alertErrorNotification.setMessage(R.string.input_error_message);
    	}
    	if (error == "connection") {
        	alertErrorNotification.setTitle(R.string.connection_error_title);
        	alertErrorNotification.setMessage(R.string.connection_error_message);
    	}
    	// Setting the Text for the Dialog Button
    	alertErrorNotification.setNegativeButton(R.string.dialog_button,new DialogInterface.OnClickListener() {
    		public void onClick(DialogInterface dialog,int id) {
    			// Close the Alert Dialog
    			dialog.cancel();
    		}
    	});
    	AlertDialog alertErrorDialog = alertErrorNotification.create();
    	// show alert
    	alertErrorDialog.show();
    }
	
	// Thumbnail Set From URL
	public Bitmap getImageFromURL(String thumbURL) {
		try {
			URL currentURL = new URL(thumbURL);
			HttpURLConnection currentConnection = (HttpURLConnection)currentURL.openConnection();
			currentConnection.setDoInput(true);
			currentConnection.connect();
			InputStream connectionInput = currentConnection.getInputStream();
			currentThumbnail = BitmapFactory.decodeStream(connectionInput);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (currentThumbnail != null) {
			return currentThumbnail;
		} else {
			return null;
		}
	}

	// Alert Dialog with Game Information
    private void showAlert(View view) { 
    	AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(MainActivity.this);
    	
    	alertDialogBuilder.setTitle(R.string.dialog_title);
    	// Constructing Alert Information from JSON Data
    	
    	String selectedStore = null;
    	for (int a = 0; a < storeList.size(); a++) {
			if (gameDetails.get(0).storeID.toString().matches
					(storeList.get(a).storeID.toString())) {
				selectedStore = storeList.get(a).name.toString();
				selectedStore = selectedStore.replace("_", " ");
			}
		}
    	
    	// Game Details Image
    	ImageView image = new ImageView(this);
    	LayoutParams params = new LayoutParams(
                LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
    	params.height = 5;
    	params.width = 5;
    	image.setLayoutParams(params);
    	image.setScaleType(ImageView.ScaleType.CENTER_CROP);
    	currentThumbnail = getImageFromURL(gameDetails.get(0).image.toString());
    	image.setImageBitmap(currentThumbnail);

//    	Set the background image on this imageview either by using drawable or by setting bitmap
    	
    	// Construct Game Details Information
		String allData = "Game: " + gameDetails.get(0).name.toString()
				+ "\r\nPublisher: " + gameDetails.get(0).publisher.toString()
				+ "\r\nStore: " + selectedStore
				+ "\r\nRetail Price: " + gameDetails.get(0).retailPrice.toString()
				+ "\r\nSale Price: " + gameDetails.get(0).salePrice.toString();
		
		alertDialogBuilder.setMessage(allData).setView(image);
    	
    	// Setting the Text for the Dialog Button
    	alertDialogBuilder.setNegativeButton(R.string.dialog_button,new DialogInterface.OnClickListener() {
    		public void onClick(DialogInterface dialog,int id) {
    			// Close the Alert Dialog
    			dialog.cancel();
    		}
    	});
    	params.height = 400;
    	params.width = 200;
    	AlertDialog alertDialog = alertDialogBuilder.create();
    	alertDialog.getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
    	// show alert
    	alertDialog.show();
    }
    
    // Check Network Connection Method
    public Boolean checkConnection (Context context) {
    	Boolean connected = false;
    	ConnectivityManager connManag = (ConnectivityManager) MainActivity.context
    			.getSystemService
    			(Context.CONNECTIVITY_SERVICE);
    	NetworkInfo networkInfomation = connManag.getActiveNetworkInfo();
    	if (networkInfomation != null) {
    		if (networkInfomation.isConnected()) {
    			Log.i(tag, "Connection Type: " + networkInfomation.getTypeName()
    					.toString());
    			connected = true;
    		}
    	}
    	return connected;
    }
    
    // API Method
    public String getAPIresponse(URL url) {
    	String apiResponse = "";
    	try {
			URLConnection apiConnection = url.openConnection();
			BufferedInputStream bufferedInput = new BufferedInputStream(apiConnection
					.getInputStream());
			byte[] contextByte = new byte[1024];
			int bytesRead = 0;
			StringBuffer responseBuffer = new StringBuffer();
			while ((bytesRead = bufferedInput.read(contextByte)) != -1) {
				apiResponse = new String(contextByte, 0, bytesRead);
				responseBuffer.append(apiResponse);
			}
			apiResponse = responseBuffer.toString();
//			Log.i(tag, apiResponse);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			Log.i(tag, "getAPIresponse - no data returned");
			e.printStackTrace();
		}
    	Log.i(tag, apiResponse.toString());
    	return apiResponse;
    }
    
    // API Class
    class getAPIdata extends AsyncTask<String, Void, String> {

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			
			// Show Animation
			animation.setVisibility(View.VISIBLE);
		}
		@Override
		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			String APIresponseStr = "";
			
			// API Call based on Selected API
			try {
				URL url = null;
				if (game == true && details == false && stores == false) {
					url = new URL(currentURL);
				}
				if (game == false && details == false && stores == true) {
					url = new URL(context.getString(R.string.store_url));
				}
				if (game == false && details == true && stores == false) {
					url = new URL(currentURL);
				}
				APIresponseStr = getAPIresponse(url);
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				Log.i(tag, "Something went wrong in getAPIdata");
				e.printStackTrace();
			}
			return APIresponseStr;
		}
		@Override
		protected void onPostExecute(String result) {
//			Log.i(tag, result);
			super.onPostExecute(result);
			
			// Hide Animation
			animation.setVisibility(View.GONE);
			
			// Parse Methods Called based on Which API is Called
			if (game == true && details == false && stores == false) {
				parseData("games", result);
			}
			if (game == false && details == false && stores == true) {
				parseData("stores", result);
			}
			if (game == false && details == true && stores == false) {
//				Log.i(tag, result.toString());
				parseData("details", result);
			}
		}
    }
    
    // Custom ListAdapter Class
    public class customListAdapter extends ArrayAdapter <Games> {
    	public customListAdapter() {
    		super(context, R.layout.list_item, gamesList);
    	}

    	// Set List Item Information
		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View customItemView = convertView;
			
			// Get Layout From JAR
//			RelativeLayout customLayout = new CustomCellLayout(this);
			
			if (customItemView == null) {
				LayoutInflater viewInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				customItemView = viewInflater.inflate(R.layout.list_item, parent, false);
			}
			
			ImageView thumbnailView = (ImageView)customItemView.findViewById(R.id.list_item_image);
			TextView gameTitleView = (TextView)customItemView.findViewById(R.id.list_item_title);
			TextView cheapestPriceView = (TextView)customItemView.findViewById(R.id.list_item_price);
			
/*			ImageView thumbnailView = (ImageView)customItemView.findViewWithTag("list_item_image");
			TextView gameTitleView = (TextView)customItemView.findViewWithTag("list_item_title");
			TextView cheapestPriceView = (TextView)customItemView.findViewWithTag("list_item_price");*/
			
			currentThumbnail = getImageFromURL(gamesList.get(position).thumbnail.toString());
			thumbnailView.setImageBitmap(currentThumbnail);
			gameTitleView.setText(gamesList.get(position).gameName.toString());
			cheapestPriceView.setText("$" + gamesList.get(position).cheapestPrice.toString());
			
			return customItemView;
		}
    }
    
    // Spinner OnItemSelected Listener
    public class getSelectedItem implements OnItemSelectedListener {

        public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
            returnNum = (pos * 5) + 4;
        }

		@Override
		public void onNothingSelected(AdapterView<?> parent) {
			// TODO Auto-generated method stub
			
		}
    }
    
}
