package com.example.gamefinder;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import classDetails.Games;
import android.app.Activity;
import android.app.ActionBar;
import android.app.Fragment;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.os.Build;

public class MainActivity extends Activity {

	static String tag = "NETWORK DATA - MAINACTIVITY";
	static Context context;
	List<Games> gamesList = new ArrayList<Games>();
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (savedInstanceState == null) {
            getFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }
        ArrayAdapter<Games> listAdapter = new ArrayAdapter<Games>
		(this, android.R.layout.simple_list_item_1, gamesList);
		setListAdapter(listAdapter);
		parseData();
		listAdapter.notifyDataSetChanged();
    }


    private void setListAdapter(ArrayAdapter<Games> listAdapter) {
		// TODO Auto-generated method stub
		
	}


	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            return rootView;
        }
    }
    
	// Get and Parse JSON Function
	public void parseData() {
		
		//Get Data
		StringBuffer jsonBuffer = new StringBuffer();
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new InputStreamReader(getAssets().open(
			"staticData.json")));
			String temporaryData;
			while ((temporaryData = reader.readLine()) != null)
				jsonBuffer.append(temporaryData);
		} 
		catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				reader.close(); // stop reading
			} 
			catch (IOException e) {
				e.printStackTrace();
			}
		}
		String jsonString = jsonBuffer.toString();
		Log.i("MainActivity", jsonString);
		// Parse JSON
		try {
			// Creating JSONObject from String
			JSONObject mainObject = new JSONObject(jsonString);

			// Creating JSONArray from JSONObject
			JSONArray jsonArray = mainObject.getJSONArray("");

			// JSONArray has four JSONObject
			for (int i = 0; i < jsonArray.length(); i++) {
	
				// Creating JSONObject from JSONArray
				JSONObject jsonSubObject = jsonArray.getJSONObject(i);
				JSONObject external = jsonSubObject.getJSONObject("external");
				Log.i("MainActivity", external.toString());
				// Get Child Element
/*				JSONObject currently = jsonSubObject.getJSONObject("currently");
				Log.i("MainActivity", currently.toString());
				// Find and Set City
				String currentCity = "Not Available";
				String lat = Integer.toString(jsonSubObject.getInt("latitude"));
				String longit = Integer.toString(jsonSubObject.getInt("longitude"));

				if(lat.matches("40") && longit.matches("-73")) {
					currentCity = "New York, NY";
				}
				if(lat.matches("34") && longit.matches("-118")) {
					currentCity = "Los Angeles, CA";		
				}
				if(lat.matches("41") && longit.matches("-87")) {
					currentCity = "Chicago, IL";
				}
				if(lat.matches("29") && longit.matches("-95")) {
					currentCity = "Houston, TX";
				}
				if(lat.matches("33") && longit.matches("-112")) {
					currentCity = "Phoenix, AZ";
				}
				
				String currentSummary = currently.getString("summary");
				String currentIcon = currently.getString("icon");
				int currentRainChance = currently.getInt("precipProbability");
				int currentTemp = currently.getInt("temperature");
				int currentWind = currently.getInt("windSpeed");
				String tz = jsonSubObject.getString("timezone");
				Log.i(tag, currentCity.toString());
				Log.i(tag, lat.toString());
				Log.i(tag, longit.toString());
				Log.i(tag, currentSummary.toString());
				Log.i(tag, currentIcon.toString());
				Log.i(tag, Integer.toString(currentRainChance));
				Log.i(tag, Integer.toString(currentTemp));
				Log.i(tag, Integer.toString(currentWind));
				Log.i(tag, tz.toString());
				setClass(currentCity, currentSummary, tz, currentIcon, currentRainChance, 
						currentTemp, currentWind);*/
			}
		} 
		catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
    
}
